package main

func main()  {
	and()
	println("-----------")
	or()
	println("-----------")
	a := 1
	println(a<<2)
	println("-----------")
	b := 0
	b = b | 1
	println(b)
	b = b | 2
	println(b)
	b = b | 4
	println(b)
	b = b | 8
	println(b)
	b = b | 16
	println(b)
	b = b | 32
	println(b)
	b = b | 64
	println(b)



	println(103*20/100)
}

// and运算 &
func and()  {
	println("=== 1. and运算 & ===")
	// and运算通常用于二进制的取位操作，例如一个数 and 1的结果就是取二进制的最末位。
	// 这可以用来判断一个整数的奇偶，二进制的最末位为0表示该数为偶数，最末位为1表示该数为奇数。
	a := 0
	println(a & 1)
	a = 1
	println(a & 1)
	a = 2
	println(a & 1)
	a = 2
	println(a & 1)

	// 相同位的两个数字都为1，则为1；若有一个不为1，则为0。
	// 00101
	// 11100
	//（&；或者and）
	// ----------------
	// 00100
	a = 10
	b := 12
	c := 30
	println(a & b)
	println(a & c)
}

// or运算
// or运算通常用于二进制特定位上的无条件赋值，例如一个数or 1的结果就是把二进制最末位强行变成1。
// 如果需要把二进制最末位变成0，对这个数or 1之后再减一就可以了，其实际意义就是把这个数强行变成最接近的偶数。
func or()  {
	println("=== 2. or运算 | ===")
	// 相同位只要一个为1即为1。
	// 00101
	// 11100
	//（|或者or）
	// ----------------
	// 11101
	a := 10
	println(a)
	println(a | 1)
}

// 异或的符号是^。按位异或运算, 对等长二进制模式按位或二进制数的每一位执行逻辑按位异或操作.
// 操作的结果是如果某位不同则该位为1, 否则该位为0.
func xor()  {
	println("=== 3. xor运算 ^ ===")
	// xor运算的逆运算是它本身，也就是说两次异或同一个数最后结果不变，即（a xor b) xor b = a。
	// xor运算可以用于简单的加密，比如我想对我MM说1314520，但怕别人知道，于是双方约定拿我的生日19880516作为密钥。
	// 1314520 xor 19880516 = 20665500，我就把20665500告诉MM。MM再次计算20665500 xor 19880516的值，得到1314520。
	// 相同位不同则为1，相同则为0。
	// 00101
	// 11100
	//（^或者xor）
	// ----------------
	// 11001
}
